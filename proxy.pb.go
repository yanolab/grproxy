// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proxy.proto

package grproxy

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReadWrite struct {
	Buf                  []byte   `protobuf:"bytes,1,opt,name=buf,proto3" json:"buf,omitempty"`
	Len                  int32    `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadWrite) Reset()         { *m = ReadWrite{} }
func (m *ReadWrite) String() string { return proto.CompactTextString(m) }
func (*ReadWrite) ProtoMessage()    {}
func (*ReadWrite) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{0}
}

func (m *ReadWrite) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadWrite.Unmarshal(m, b)
}
func (m *ReadWrite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadWrite.Marshal(b, m, deterministic)
}
func (m *ReadWrite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadWrite.Merge(m, src)
}
func (m *ReadWrite) XXX_Size() int {
	return xxx_messageInfo_ReadWrite.Size(m)
}
func (m *ReadWrite) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadWrite.DiscardUnknown(m)
}

var xxx_messageInfo_ReadWrite proto.InternalMessageInfo

func (m *ReadWrite) GetBuf() []byte {
	if m != nil {
		return m.Buf
	}
	return nil
}

func (m *ReadWrite) GetLen() int32 {
	if m != nil {
		return m.Len
	}
	return 0
}

func init() {
	proto.RegisterType((*ReadWrite)(nil), "main.ReadWrite")
}

func init() { proto.RegisterFile("proxy.proto", fileDescriptor_700b50b08ed8dbaf) }

var fileDescriptor_700b50b08ed8dbaf = []byte{
	// 133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x28, 0xca, 0xaf,
	0xa8, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc, 0x53, 0xd2, 0xe7,
	0xe2, 0x0c, 0x4a, 0x4d, 0x4c, 0x09, 0x2f, 0xca, 0x2c, 0x49, 0x15, 0x12, 0xe0, 0x62, 0x4e, 0x2a,
	0x4d, 0x93, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0x02, 0x31, 0x41, 0x22, 0x39, 0xa9, 0x79, 0x12,
	0x4c, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x20, 0xa6, 0x91, 0x23, 0x17, 0x4f, 0x00, 0xc8, 0x94, 0xe0,
	0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x43, 0x2e, 0x76, 0xe7, 0xfc, 0xbc, 0xbc, 0xd4, 0xe4,
	0x12, 0x21, 0x7e, 0x3d, 0x90, 0x91, 0x7a, 0x70, 0xf3, 0xa4, 0xd0, 0x05, 0x94, 0x18, 0x34, 0x18,
	0x0d, 0x18, 0x93, 0xd8, 0xc0, 0x0e, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x8e, 0xa3, 0xc9,
	0xcc, 0x8f, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProxyServiceClient is the client API for ProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProxyServiceClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (ProxyService_ConnectClient, error)
}

type proxyServiceClient struct {
	cc *grpc.ClientConn
}

func NewProxyServiceClient(cc *grpc.ClientConn) ProxyServiceClient {
	return &proxyServiceClient{cc}
}

func (c *proxyServiceClient) Connect(ctx context.Context, opts ...grpc.CallOption) (ProxyService_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProxyService_serviceDesc.Streams[0], "/main.ProxyService/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyServiceConnectClient{stream}
	return x, nil
}

type ProxyService_ConnectClient interface {
	Send(*ReadWrite) error
	Recv() (*ReadWrite, error)
	grpc.ClientStream
}

type proxyServiceConnectClient struct {
	grpc.ClientStream
}

func (x *proxyServiceConnectClient) Send(m *ReadWrite) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyServiceConnectClient) Recv() (*ReadWrite, error) {
	m := new(ReadWrite)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProxyServiceServer is the server API for ProxyService service.
type ProxyServiceServer interface {
	Connect(ProxyService_ConnectServer) error
}

// UnimplementedProxyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProxyServiceServer struct {
}

func (*UnimplementedProxyServiceServer) Connect(srv ProxyService_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

func RegisterProxyServiceServer(s *grpc.Server, srv ProxyServiceServer) {
	s.RegisterService(&_ProxyService_serviceDesc, srv)
}

func _ProxyService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyServiceServer).Connect(&proxyServiceConnectServer{stream})
}

type ProxyService_ConnectServer interface {
	Send(*ReadWrite) error
	Recv() (*ReadWrite, error)
	grpc.ServerStream
}

type proxyServiceConnectServer struct {
	grpc.ServerStream
}

func (x *proxyServiceConnectServer) Send(m *ReadWrite) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxyServiceConnectServer) Recv() (*ReadWrite, error) {
	m := new(ReadWrite)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ProxyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.ProxyService",
	HandlerType: (*ProxyServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _ProxyService_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proxy.proto",
}
